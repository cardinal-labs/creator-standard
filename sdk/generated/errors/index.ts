/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidAccountType: 'Invalid account type'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountTypeError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidAccountType'
  constructor() {
    super('Invalid account type')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidAccountTypeError())
createErrorFromNameLookup.set(
  'InvalidAccountType',
  () => new InvalidAccountTypeError()
)

/**
 * DataTypeMismatch: 'Data type mismatch'
 *
 * @category Errors
 * @category generated
 */
export class DataTypeMismatchError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'DataTypeMismatch'
  constructor() {
    super('Data type mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DataTypeMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new DataTypeMismatchError())
createErrorFromNameLookup.set(
  'DataTypeMismatch',
  () => new DataTypeMismatchError()
)

/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidMint'
  constructor() {
    super('Invalid mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidMintError())
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError())

/**
 * InvalidAmount: 'Invalid amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAmountError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidAmount'
  constructor() {
    super('Invalid amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidAmountError())
createErrorFromNameLookup.set('InvalidAmount', () => new InvalidAmountError())

/**
 * InvalidTokenAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidTokenAccount'
  constructor() {
    super('Invalid token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidTokenAccountError())
createErrorFromNameLookup.set(
  'InvalidTokenAccount',
  () => new InvalidTokenAccountError()
)

/**
 * InvalidAuthority: 'Invalid authority address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid authority address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * InvalidMintManager: 'Invalid mint manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintManagerError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidMintManager'
  constructor() {
    super('Invalid mint manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintManagerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidMintManagerError())
createErrorFromNameLookup.set(
  'InvalidMintManager',
  () => new InvalidMintManagerError()
)

/**
 * InvalidMintMetadata: 'Invalid mint metadata'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidMintMetadata'
  constructor() {
    super('Invalid mint metadata')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidMintMetadataError())
createErrorFromNameLookup.set(
  'InvalidMintMetadata',
  () => new InvalidMintMetadataError()
)

/**
 * InusufficientMinimumCreatorShare: 'Insufficient minimum creator share'
 *
 * @category Errors
 * @category generated
 */
export class InusufficientMinimumCreatorShareError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InusufficientMinimumCreatorShare'
  constructor() {
    super('Insufficient minimum creator share')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InusufficientMinimumCreatorShareError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1778,
  () => new InusufficientMinimumCreatorShareError()
)
createErrorFromNameLookup.set(
  'InusufficientMinimumCreatorShare',
  () => new InusufficientMinimumCreatorShareError()
)

/**
 * InvlaidHolderTokenAccount: 'Invalid holder token account'
 *
 * @category Errors
 * @category generated
 */
export class InvlaidHolderTokenAccountError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvlaidHolderTokenAccount'
  constructor() {
    super('Invalid holder token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvlaidHolderTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new InvlaidHolderTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvlaidHolderTokenAccount',
  () => new InvlaidHolderTokenAccountError()
)

/**
 * InvalidTargetTokenAccount: 'Invalid target token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTargetTokenAccountError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidTargetTokenAccount'
  constructor() {
    super('Invalid target token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTargetTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177a,
  () => new InvalidTargetTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidTargetTokenAccount',
  () => new InvalidTargetTokenAccountError()
)

/**
 * InvalidCloseTokenAccount: 'Invalid token account to close'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCloseTokenAccountError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidCloseTokenAccount'
  constructor() {
    super('Invalid token account to close')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCloseTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidCloseTokenAccountError())
createErrorFromNameLookup.set(
  'InvalidCloseTokenAccount',
  () => new InvalidCloseTokenAccountError()
)

/**
 * InvalidHolderTokenAccount: 'Invalid holder token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidHolderTokenAccountError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidHolderTokenAccount'
  constructor() {
    super('Invalid holder token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidHolderTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new InvalidHolderTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidHolderTokenAccount',
  () => new InvalidHolderTokenAccountError()
)

/**
 * InvalidRuleset: 'Invalid ruleset'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRulesetError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'InvalidRuleset'
  constructor() {
    super('Invalid ruleset')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRulesetError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new InvalidRulesetError())
createErrorFromNameLookup.set('InvalidRuleset', () => new InvalidRulesetError())

/**
 * InvalidPreTransferInstruction: 'Invalid pre transfer instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPreTransferInstructionError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'InvalidPreTransferInstruction'
  constructor() {
    super('Invalid pre transfer instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPreTransferInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new InvalidPreTransferInstructionError()
)
createErrorFromNameLookup.set(
  'InvalidPreTransferInstruction',
  () => new InvalidPreTransferInstructionError()
)

/**
 * InvalidPostTransferInstruction: 'Invalid post transfer instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPostTransferInstructionError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'InvalidPostTransferInstruction'
  constructor() {
    super('Invalid post transfer instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPostTransferInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177f,
  () => new InvalidPostTransferInstructionError()
)
createErrorFromNameLookup.set(
  'InvalidPostTransferInstruction',
  () => new InvalidPostTransferInstructionError()
)

/**
 * AddressDisallowed: 'Disallowed address included'
 *
 * @category Errors
 * @category generated
 */
export class AddressDisallowedError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'AddressDisallowed'
  constructor() {
    super('Disallowed address included')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AddressDisallowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new AddressDisallowedError())
createErrorFromNameLookup.set(
  'AddressDisallowed',
  () => new AddressDisallowedError()
)

/**
 * ProgramNotAllowed: 'Program not allowed in allowed programs to transfer'
 *
 * @category Errors
 * @category generated
 */
export class ProgramNotAllowedError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'ProgramNotAllowed'
  constructor() {
    super('Program not allowed in allowed programs to transfer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new ProgramNotAllowedError())
createErrorFromNameLookup.set(
  'ProgramNotAllowed',
  () => new ProgramNotAllowedError()
)

/**
 * UnknownAccount: 'Unknown account found in instruction'
 *
 * @category Errors
 * @category generated
 */
export class UnknownAccountError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'UnknownAccount'
  constructor() {
    super('Unknown account found in instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnknownAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new UnknownAccountError())
createErrorFromNameLookup.set('UnknownAccount', () => new UnknownAccountError())

/**
 * AccountNotFound: 'Account not found in instruction'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotFoundError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'AccountNotFound'
  constructor() {
    super('Account not found in instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new AccountNotFoundError())
createErrorFromNameLookup.set(
  'AccountNotFound',
  () => new AccountNotFoundError()
)

/**
 * TokenAlreadyInUse: 'Token already in use'
 *
 * @category Errors
 * @category generated
 */
export class TokenAlreadyInUseError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'TokenAlreadyInUse'
  constructor() {
    super('Token already in use')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenAlreadyInUseError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new TokenAlreadyInUseError())
createErrorFromNameLookup.set(
  'TokenAlreadyInUse',
  () => new TokenAlreadyInUseError()
)

/**
 * InvalidTokenUser: 'Invalid token user'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenUserError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'InvalidTokenUser'
  constructor() {
    super('Invalid token user')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenUserError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new InvalidTokenUserError())
createErrorFromNameLookup.set(
  'InvalidTokenUser',
  () => new InvalidTokenUserError()
)

/**
 * TokenCurentlyInUse: 'Token currently in use'
 *
 * @category Errors
 * @category generated
 */
export class TokenCurentlyInUseError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'TokenCurentlyInUse'
  constructor() {
    super('Token currently in use')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenCurentlyInUseError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new TokenCurentlyInUseError())
createErrorFromNameLookup.set(
  'TokenCurentlyInUse',
  () => new TokenCurentlyInUseError()
)

/**
 * InvalidRulesetAuthority: 'Invalid ruleset authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRulesetAuthorityError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'InvalidRulesetAuthority'
  constructor() {
    super('Invalid ruleset authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRulesetAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new InvalidRulesetAuthorityError())
createErrorFromNameLookup.set(
  'InvalidRulesetAuthority',
  () => new InvalidRulesetAuthorityError()
)

/**
 * InvalidFreezeAuthority: 'Invalid freeze authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFreezeAuthorityError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'InvalidFreezeAuthority'
  constructor() {
    super('Invalid freeze authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFreezeAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new InvalidFreezeAuthorityError())
createErrorFromNameLookup.set(
  'InvalidFreezeAuthority',
  () => new InvalidFreezeAuthorityError()
)

/**
 * InvalidMintAuthority: 'Invalid mint authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintAuthorityError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'InvalidMintAuthority'
  constructor() {
    super('Invalid mint authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new InvalidMintAuthorityError())
createErrorFromNameLookup.set(
  'InvalidMintAuthority',
  () => new InvalidMintAuthorityError()
)

/**
 * NotEnoughRemainingAccounts: 'Not enought remaining accounts'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughRemainingAccountsError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'NotEnoughRemainingAccounts'
  constructor() {
    super('Not enought remaining accounts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughRemainingAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178a,
  () => new NotEnoughRemainingAccountsError()
)
createErrorFromNameLookup.set(
  'NotEnoughRemainingAccounts',
  () => new NotEnoughRemainingAccountsError()
)

/**
 * ProtocolsShutdown: 'Cardinal Protocols are shutting down. Please read latest twitter post for more information'
 *
 * @category Errors
 * @category generated
 */
export class ProtocolsShutdownError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'ProtocolsShutdown'
  constructor() {
    super(
      'Cardinal Protocols are shutting down. Please read latest twitter post for more information'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProtocolsShutdownError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new ProtocolsShutdownError())
createErrorFromNameLookup.set(
  'ProtocolsShutdown',
  () => new ProtocolsShutdownError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
